#define LOG_TAG "myfake"

#include <hardware/hardware.h>
#include <hardware/mydrv.h>
#include <fcntl.h>
#include <errno.h>
#include <cutils/log.h>
#include <cutils/atomic.h>

#include <errno.h>
#include <stdint.h>
#include <sys/time.h>
#include <linux/time.h>

#include <cutils/log.h>

#include <hardware/hardware.h>


#define DEVICE_NAME "/dev/mydrv"
#define MODULE_NAME "/dev/mydrv"
#define MODULE_AUTHOR "cuishang"


static int mydrv_set_hight(struct mydrv_device_t* dev, int val)
{
    int ioport = 177;
    val = 1;

    LOGI("MYDRV HAL: set value %d to device.", val); 
    ioctl(dev->fd, val, &ioport);
    return 0; 
}

static int mydrv_set_low(struct mydrv_device_t* dev, int val)
{
    int ioport = 177;

    LOGI("MYDRV HAL: set value %d to device.", val); 
    ioctl(dev->fd, val, &ioport);
    return 0; 
}

static int mydrv_device_close(struct hw_device_t* device)
{
    struct mydrv_device_t* mydrv_device = (struct mydrv_device_t*)device; 

    if(mydrv_device) 
    { 
        close(mydrv_device->fd); 
        free(mydrv_device); 
    } 
    return 0; 
}

static int mydrv_device_open(const struct hw_module_t* module, const char* name, struct hw_device_t** device)
{
    struct mydrv_device_t* dev;
    dev = (struct mydrv_device_t*)malloc( sizeof(struct mydrv_device_t) ); //申请连续内存空间

    if (!dev)
    {
        printf("MYDRV HAL :failed to alloc space!\n");
        return -EFAULT;
    }

    memset(dev, 0, sizeof(struct mydrv_device_t)); //为malloc申请的内存初始化
    dev->common.tag = HARDWARE_DEVICE_TAG;
    dev->common.version = 0; 
    dev->common.module = (hw_module_t*)module; 
    dev->common.close = mydrv_device_close; 
    dev->set_hight = mydrv_set_hight; 
    dev->set_low = mydrv_set_low; 

    if( (dev->fd = open(DEVICE_NAME, O_RDWR)) == -1) 
    { 
        LOGE("MYDRV HAL: failed to open /dev/mydrv -- %s.", strerror(errno)); free(dev); 
        return -EFAULT; 
    } 

    *device = &(dev->common); 
    LOGI("MYDRV HAL: open /dev/mydrv successfully."); 
    return 0; 


}



//定义模块操作方法的结构体 
static struct hw_module_methods_t mydrv_module_methods = {
 
    open: mydrv_device_open 
};


//定义模块结构体变量 
struct mydrv_module_t HAL_MODULE_INFO_SYM = {
    common :  
    {
        tag : HARDWARE_MODULE_TAG, 
        version_major : 1, 
        version_minor : 0, 
        id : MYDRV_HARDWARE_MODULE_ID, 
        name : MODULE_NAME,
        author : MODULE_AUTHOR, 
        methods : &mydrv_module_methods, 
    },
};

