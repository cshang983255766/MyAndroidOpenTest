#define LOG_TAG "myfake"

#include <hardware/hardware.h>
#include <hardware/myfake.h>
#include <fcntl.h>
#include <errno.h>
#include <cutils/log.h>
#include <cutils/atomic.h>

#include <errno.h>
#include <stdint.h>
#include <sys/time.h>
#include <linux/time.h>

#include <cutils/log.h>

#include <hardware/hardware.h>


#define DEVICE_NAME "/dev/myfake"
#define MODULE_NAME "/dev/myfake"
#define MODULE_AUTHOR "cuishang"

static int myfake_device_open(const struct hw_module_t* module, const char* name, struct hw_device_t** device);
static int myfake_device_close(struct hw_device_t* device);

static int myfake_set_val(struct myfake_device_t* dev, int val);
static int myfake_get_val(struct myfake_device_t* dev, int* val);


static int myfake_set_val(struct myfake_device_t* dev, int val) 
{ 
    LOGI("myfake HAL: set value %d to device.", val); 
    write(dev->fd, &val, sizeof(val)); 
    return 0; 
}

static int myfake_get_val(struct myfake_device_t* dev, int* val) 
{ 
    if(!val) 
    { 
        LOGE("MYFAKE HAL: error val pointer."); 
        return -EFAULT; 
    } 
    read(dev->fd, val, sizeof(*val)); 
    LOGI("MYFAKE HAL: get value %d from device.", *val);
    return 0; 
}

static int myfake_device_close(struct hw_device_t* device) 
{ 
    struct myfake_device_t* myfake_device = (struct myfake_device_t*)device; 

    if(myfake_device) 
    { 
        close(myfake_device->fd); 
        free(myfake_device); 
    } 
    return 0; 
}

static int myfake_device_open(const struct hw_module_t* module, const char* name, struct hw_device_t** device) 
{ 
    struct myfake_device_t* dev; 
    dev = (struct myfake_device_t*)malloc( sizeof(struct myfake_device_t) ); 
    if(!dev) 
    { 
        LOGE("MYFAKE HAL: failed to alloc space"); 
        return -EFAULT; 
    } 
    memset(dev, 0, sizeof(struct myfake_device_t)); 
    dev->common.tag = HARDWARE_DEVICE_TAG;
    dev->common.version = 0; 
    dev->common.module = (hw_module_t*)module; 
    dev->common.close = myfake_device_close; 
    dev->set_val = myfake_set_val; 
    dev->get_val = myfake_get_val; 

    if( (dev->fd = open(DEVICE_NAME, O_RDWR)) == -1) 
    { 
        LOGE("MYFAKE HAL: failed to open /dev/myfake -- %s.", strerror(errno)); free(dev); 
        return -EFAULT; 
    } 

    *device = &(dev->common); 
    LOGI("MYFAKE HAL: open /dev/myfake successfully."); 
    return 0; 
}


//定义模块操作方法的结构体 
static struct hw_module_methods_t myfake_module_methods = 
{ 
    open: myfake_device_open 
};


//定义模块结构体变量 
struct myfake_module_t HAL_MODULE_INFO_SYM = {
    common :  
    {
        tag : HARDWARE_MODULE_TAG, 
        version_major : 1, 
        version_minor : 0, 
        id : MYFAKE_HARDWARE_MODULE_ID, 
        name : MODULE_NAME,
        author : MODULE_AUTHOR, 
        methods : &myfake_module_methods, 
    },
};

